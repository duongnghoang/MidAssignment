// <auto-generated />
using System;
using Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428034426_Seed_Data")]
    partial class Seed_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Available")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Author = "Harper Lee",
                            Available = 3L,
                            CategoryId = 1L,
                            ISBN = "978-0446310789",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1960, 7, 11),
                            Quantity = 5L,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 2L,
                            Author = "Jane Austen",
                            Available = 2L,
                            CategoryId = 1L,
                            ISBN = "978-0141439518",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1813, 1, 28),
                            Quantity = 4L,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 3L,
                            Author = "F. Scott Fitzgerald",
                            Available = 4L,
                            CategoryId = 1L,
                            ISBN = "978-0743273565",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1925, 4, 10),
                            Quantity = 6L,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 4L,
                            Author = "George Orwell",
                            Available = 0L,
                            CategoryId = 1L,
                            ISBN = "978-0451524935",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1949, 6, 8),
                            Quantity = 3L,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 5L,
                            Author = "J.D. Salinger",
                            Available = 1L,
                            CategoryId = 1L,
                            ISBN = "978-0316769488",
                            IsDeleted = true,
                            PublicationDate = new DateOnly(1951, 7, 16),
                            Quantity = 2L,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 6L,
                            Author = "Yuval Noah Harari",
                            Available = 5L,
                            CategoryId = 2L,
                            ISBN = "978-0062316097",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2014, 9, 1),
                            Quantity = 7L,
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            Id = 7L,
                            Author = "Tara Westover",
                            Available = 3L,
                            CategoryId = 2L,
                            ISBN = "978-0399590504",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2018, 2, 20),
                            Quantity = 4L,
                            Title = "Educated"
                        },
                        new
                        {
                            Id = 8L,
                            Author = "Rebecca Skloot",
                            Available = 2L,
                            CategoryId = 2L,
                            ISBN = "978-1400052189",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2010, 2, 2),
                            Quantity = 3L,
                            Title = "The Immortal Life of Henrietta Lacks"
                        },
                        new
                        {
                            Id = 9L,
                            Author = "Daniel Kahneman",
                            Available = 4L,
                            CategoryId = 2L,
                            ISBN = "978-0374533557",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2011, 10, 25),
                            Quantity = 5L,
                            Title = "Thinking, Fast and Slow"
                        },
                        new
                        {
                            Id = 10L,
                            Author = "Charles Duhigg",
                            Available = 0L,
                            CategoryId = 2L,
                            ISBN = "978-0812981605",
                            IsDeleted = true,
                            PublicationDate = new DateOnly(2012, 2, 28),
                            Quantity = 2L,
                            Title = "The Power of Habit"
                        },
                        new
                        {
                            Id = 11L,
                            Author = "Frank Herbert",
                            Available = 5L,
                            CategoryId = 3L,
                            ISBN = "978-0441013593",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1965, 8, 1),
                            Quantity = 6L,
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 12L,
                            Author = "Andy Weir",
                            Available = 3L,
                            CategoryId = 3L,
                            ISBN = "978-0804139021",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2014, 2, 11),
                            Quantity = 4L,
                            Title = "The Martian"
                        },
                        new
                        {
                            Id = 13L,
                            Author = "William Gibson",
                            Available = 2L,
                            CategoryId = 3L,
                            ISBN = "978-0441569595",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1984, 7, 1),
                            Quantity = 3L,
                            Title = "Neuromancer"
                        },
                        new
                        {
                            Id = 14L,
                            Author = "Isaac Asimov",
                            Available = 4L,
                            CategoryId = 3L,
                            ISBN = "978-0553293357",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1951, 5, 1),
                            Quantity = 5L,
                            Title = "Foundation"
                        },
                        new
                        {
                            Id = 15L,
                            Author = "Neal Stephenson",
                            Available = 1L,
                            CategoryId = 3L,
                            ISBN = "978-0553380958",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1992, 6, 1),
                            Quantity = 2L,
                            Title = "Snow Crash"
                        },
                        new
                        {
                            Id = 16L,
                            Author = "Walter Isaacson",
                            Available = 3L,
                            CategoryId = 4L,
                            ISBN = "978-1451648539",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2011, 10, 24),
                            Quantity = 4L,
                            Title = "Steve Jobs"
                        },
                        new
                        {
                            Id = 17L,
                            Author = "Anne Frank",
                            Available = 4L,
                            CategoryId = 4L,
                            ISBN = "978-0553577129",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(1947, 6, 25),
                            Quantity = 5L,
                            Title = "The Diary of a Young Girl"
                        },
                        new
                        {
                            Id = 18L,
                            Author = "Michelle Obama",
                            Available = 5L,
                            CategoryId = 4L,
                            ISBN = "978-1524763138",
                            IsDeleted = false,
                            PublicationDate = new DateOnly(2018, 11, 13),
                            Quantity = 6L,
                            Title = "Becoming"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApproverId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RequestorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("RequestorId");

                    b.ToTable("BookBorrowingRequests");
                });

            modelBuilder.Entity("Domain.Entities.BookBorrowingRequestDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("BookId", "RequestId")
                        .IsUnique();

                    b.ToTable("BookBorrowingRequestsDetail");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Biography"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "SUPER_USER"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "NORMAL_USER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.HasOne("Domain.Entities.User", "Approver")
                        .WithMany("BookBorrowingApproves")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Requestor")
                        .WithMany("BookBorrowingRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("Domain.Entities.BookBorrowingRequestDetail", b =>
                {
                    b.HasOne("Domain.Entities.Book", "Book")
                        .WithMany("BookBorrowingRequestDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BookBorrowingRequest", "BookBorrowingRequest")
                        .WithMany("BookBorrowingRequestDetails")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookBorrowingRequest");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Book", b =>
                {
                    b.Navigation("BookBorrowingRequestDetails");
                });

            modelBuilder.Entity("Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.Navigation("BookBorrowingRequestDetails");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("BookBorrowingApproves");

                    b.Navigation("BookBorrowingRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
